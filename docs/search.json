[
  {
    "objectID": "Sesion1.html",
    "href": "Sesion1.html",
    "title": "3  Sesión 1. Información personal y Académica",
    "section": "",
    "text": "3.1 Distribución geográfica",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Sesión 1. Información personal y Académica</span>"
    ]
  },
  {
    "objectID": "Sesion1.html#distribución-geográfica",
    "href": "Sesion1.html#distribución-geográfica",
    "title": "3  Sesión 1. Información personal y Académica",
    "section": "",
    "text": "3.1.1 Nacional (pendiente actualizar)\nLa distribución de los departamentos de procedencia de los estudiantes se refleja en el mapa de Colombia. Entre los departamentos con mayor procedencia están Santander liderando la participación con un XXX% del total de estudiantes. Le siguen Cesar con XXX% y Norte de Santander con XXX%, consolidándose como las regiones con mayor representación.\nLos demás departamentos registran una participación conjunta del 15.7%, destacando entre ellos Amazonas, Huila, Tolima y Antioquia, entre otros. Aunque su presencia es menor, su participación evidencia la diversidad geográfica de los estudiantes y el alcance regional de la institución.\n\n\n3.1.2 Departamental (pendiente actualizar)\nLa distribución de los estudiantes en los municipios de Santander se refleja en el mapa. Bucaramanga concentra el 47.3% del total de estudiantes, mientras que el área metropolitana de Bucaramanga, incluyendo Floridablanca, Piedecuesta y Girón, alcanza una representación del 78.6%. Por su parte, Barrancabermeja registra una participación del 7.3%, siendo el municipio con mayor presencia fuera del área metropolitana. El resto de los municipios de Santander representan en conjunto el 14%.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Sesión 1. Información personal y Académica</span>"
    ]
  },
  {
    "objectID": "Sesion1.html#perfil-demográfico",
    "href": "Sesion1.html#perfil-demográfico",
    "title": "3  Sesión 1. Información personal y Académica",
    "section": "3.2 Perfil Demográfico",
    "text": "3.2 Perfil Demográfico\n\n3.2.1 Edad\n\n\n\n\n\n\nDescripción para todos los campus\n\n\n\nEn términos generales, entre los estudiantes de recién ingreso a la UDES se observa que la población estudiantil es menor de 20 años. En ese sentido el 52,4% se concentra en el rango etario de 16-18 años, mientras que el 29% se ubica entre los 18-20 años. En la siguiente grafica se muestra el box plot de la edad por programas.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAbreviaturas de programas académicos\n\n\n\n ANTR: Antropología, INQU: Instrumentación Quirúrgica, MYPB: Mercadeo y Publicidad, ADFI: Administración Financiera, TEOC: Terapia Ocupacional, FONO: Fonoaudiología, FISI: Fisioterapia, ININ: Ingeniería Industrial, TCGF: Tecnología en Comunicación Gráfica, BACT: Bacteriología y Laboratorio Clínico, MEDI: Medicina, ADNI: Administración de Negocios Internacionales, INCI: Ingeniería Civil, PSIC: Psicología, LEIN: Licenciatura en Educación Infantil, ENFE: Enfermería, DERE: Derecho, MBIN: Microbiología Industrial, MEVE: Medicina Veterinaria, INAG: Ingeniería Agroindustrial, INSO: Ingeniería de Software, CONT: Contaduría Pública, TSOC: Tecnología en Supervisión de Obras Civiles, COSP: Comunicación Social y Periodismo, GEOL: Geología, ICCI: Ingeniería en Ciencias de la Computación e Inteligencia Artificial, INSI: Ingeniería de Sistemas, DIGR: Diseño Gráfico, COEX: Comercio Exterior, MVZC: Medicina Veterinaria y Zootecnia, IQBO: Instrumentación Quirúrgica (Bogotá), TLAC: Técnico Laboral en Competencias para Auxiliar de Clínica Veterinaria. \n\n\n\n\n3.2.2 Estado civil\n\n\n\n\n\n\nDescripción para todos los campus\n\n\n\nEl 95,6% de estos estudiantes son solteros, lo cual representa la gran mayoría de la población estudiantil. La unión libre representa el 3,41% y los estudiantes casados constituyen apenas el 1,03%\n\n\n\n\n\n\n\n\n\n\n3.2.3 Sexo\n\n\n\n\n\n\nDescripción para todos los campus\n\n\n\nEn relación con el sexo, el 61,3% de los participantes eran mujeres y el 38,8% eran hombres.\n\n\n\n\n\n\n\n\n\n\n3.2.4 Pais de origen\n\n\n\n\n\n\nDescripción para todos los campus\n\n\n\nLa gráfica presenta la distribución porcentual de estudiantes según su país de origen. La población estudiantil es predominantemente colombiana (96,4%), mientras que al realizar un filtro y seleccionar solo los estudiantes extranjeros se distribuyen de la siguiente manera: venezolanos 80,4%, españoles 6,52%, mexicanos 6,52%, ecuatorianos 4,32% y estadounidenses 2,17%.\n\n\n\n\n\n\n\n\n##Dificultades Académicas y Dominio de Idiomas\n\n\n\n\n\n\nDescripción para todos los campus\n\n\n\nEn cuanto al grado de dificultad en educación básica y media, 45,2% de los estudiantes manifestaron un grado de dificultad entre muy alto y alto en comprensión lectora, mientras que 40% reportaron lo mismo en expresión oral, y 32% indicaron dificultades en matemáticas.\nAdemás, los resultados evidencian dificultades en habilidades en cuanto a análisis (42%), comprensión (43,2%), atención (43,7%), memoria (39,3%) y adaptación (33,7%).\nEl 73,2% de los encuestados describieron su desempeño académico como bueno, el 18,6% como excelente, y solo el 8,1% lo calificó como regular.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Sesión 1. Información personal y Académica</span>"
    ]
  },
  {
    "objectID": "filtro.html",
    "href": "filtro.html",
    "title": "4  Campus Filtro",
    "section": "",
    "text": "4.1 Distribución de Edad por Campus\nSeleccione un campus para visualizar la distribución de edad correspondiente. El gráfico se actualiza automáticamente con base en su selección.\nlibrary(dplyr)\nlibrary(plotly)\n\n# Preparar datos\ndata_plot_drop &lt;- datos |&gt;\n  filter(campus %in% c(\"Bucaramanga\", \"Cúcuta\", \"Valledupar\"), !is.na(edad)) |&gt;\n  mutate(campus_total = campus)  # duplicar para crear opción \"Todos\"\n\n# Agregar fila con etiqueta \"Todos\"\ndata_total &lt;- data_plot_drop |&gt; \n  mutate(campus = \"Todos\")  # etiqueta adicional\n\n# Combinar\ndata_all &lt;- bind_rows(data_plot_drop, data_total)\n\n# Lista de opciones del dropdown\ncampus_levels &lt;- unique(data_all$campus)\n\n# Crear gráfico interactivo\npd &lt;- data_all |&gt;\n  plot_ly(\n    type = 'histogram',\n    x = ~edad,\n    autobinx = FALSE,\n    xbins = list(start = 0, end = 40, size = 2),\n    marker = list(color = '#004899'),\n    transforms = list(\n      list(\n        type = 'filter',\n        target = ~campus,\n        operation = '=',\n        value = \"Todos\"  # Mostrar todos inicialmente\n      )\n    )\n  ) |&gt; layout(\n    title = \"Distribución de la Edad por Campus\",\n    xaxis = list(title = \"Edad\"),\n    yaxis = list(title = \"Frecuencia\"),\n    updatemenus = list(\n      list(\n        type = 'dropdown',\n        active = 0,\n        buttons = lapply(campus_levels, function(c) {\n          list(\n            method = \"restyle\",\n            args = list(\"transforms[0].value\", c),\n            label = c\n          )\n        })\n      )\n    )\n  )\n\npd\nlibrary(dplyr)\nlibrary(plotly)\n\n# Preparar datos\ndata_plot_drop &lt;- datos |&gt;\n  filter(campus %in% c(\"Bucaramanga\", \"Cúcuta\", \"Valledupar\"), !is.na(edad)) |&gt;\n  mutate(campus_total = campus)  # duplicar para crear opción \"Todos\"\n\n# Agregar fila con etiqueta \"Todos\"\ndata_total &lt;- data_plot_drop |&gt; \n  mutate(campus = \"Todos\")  # etiqueta adicional\n\n# 1. Agrupar edades por intervalos\ndatos_plot &lt;- datos %&gt;%\n  filter(!is.na(edad), !is.na(campus)) %&gt;%\n  mutate(grupo_edad = cut(edad, breaks = seq(14, 44, by = 2), right = FALSE)) %&gt;%\n  group_by(campus, grupo_edad) %&gt;%\n  summarise(n = n(), .groups = \"drop\") %&gt;%\n  group_by(campus) %&gt;%\n  mutate(pct = round(100 * n / sum(n), 1)) %&gt;%\n  ungroup()\n\n\n# 2. Crear gráfico con filtro interactivo\nplot_ly(\n  data = datos_plot,\n  x = ~grupo_edad,\n  y = ~pct,\n  type = \"bar\",\n  text = ~paste0(pct, \"%\"),\n  textposition = \"outside\",\n  transforms = list(\n    list(\n      type = 'filter',\n      target = ~campus,\n      operation = '=',\n      value = unique(datos_plot$campus)[1]\n    )\n  )\n) %&gt;%\n  layout(\n    title = \"Distribución porcentual de la Edad por campus (hasta 40 años)\",\n    xaxis = list(title = \"Edad (intervalos de 2 años)\", tickangle = -45),\n    yaxis = list(title = \"Porcentaje (%)\", ticksuffix = \"%\"),\n    updatemenus = list(\n      list(\n        type = 'dropdown',\n        active = 0,\n        buttons = lapply(unique(datos_plot$campus), function(c) {\n          list(method = \"restyle\",\n               args = list(\"transforms[0].value\", c),\n               label = c)\n        })\n      )\n    )\n  )\n\nWarning: Ignoring 2 observations\n# Buscar caracteres no válidos en 'programa'\nproblemas &lt;- datos %&gt;%\n  filter(!is.na(programa)) %&gt;%\n  filter(is.na(iconv(programa, from = \"\", to = \"UTF-8\")))\n\nprint(problemas$programa)\n\ncharacter(0)\nlibrary(dplyr)\nlibrary(plotly)\n\n# 1. Agrupar por intervalos de edad y campus\ndatos_plot &lt;- datos %&gt;%\n  filter(!is.na(edad), !is.na(campus), edad &lt; 44) %&gt;%\n  mutate(grupo_edad = cut(edad, breaks = seq(14, 44, by = 2), right = FALSE))\n\n# 2. Datos por campus\npor_campus &lt;- datos_plot %&gt;%\n  group_by(campus, grupo_edad) %&gt;%\n  summarise(n = n(), .groups = \"drop\") %&gt;%\n  group_by(campus) %&gt;%\n  mutate(pct = round(100 * n / sum(n), 1)) %&gt;%\n  ungroup()\n\n# 3. Datos totales (\"Todos\")\ntodos &lt;- datos_plot %&gt;%\n  group_by(grupo_edad) %&gt;%\n  summarise(n = n(), .groups = \"drop\") %&gt;%\n  mutate(campus = \"Todos\") %&gt;%\n  mutate(pct = round(100 * n / sum(n), 1))\n\n# 4. Combinar\ndatos_final &lt;- bind_rows(por_campus, todos)\n\n# 5. Crear gráfico interactivo con filtro\nplot_ly(\n  data = datos_final,\n  x = ~grupo_edad,\n  y = ~pct,\n  type = \"bar\",\n  text = ~paste0(pct, \"%\"),\n  textposition = \"outside\",\n  transforms = list(\n    list(\n      type = 'filter',\n      target = ~campus,\n      operation = '=',\n      value = \"Todos\"  # valor por defecto\n    )\n  )\n) %&gt;%\n  layout(\n    title = \"Distribución porcentual de la Edad por campus (hasta 40 años)\",\n    xaxis = list(title = \"Edad (intervalos de 2 años)\", tickangle = -45),\n    yaxis = list(title = \"Porcentaje\", ticksuffix = \"%\"),\n    updatemenus = list(\n      list(\n        type = 'dropdown',\n        active = 0,\n        buttons = lapply(unique(datos_final$campus), function(c) {\n          list(method = \"restyle\",\n               args = list(\"transforms[0].value\", c),\n               label = c)\n        })\n      )\n    )\n  )\nlibrary(dplyr)\nlibrary(plotly)\n\n# 1. Agrupar por intervalos de edad y campus\ndatos_plot &lt;- datos %&gt;%\n  filter(!is.na(edad), !is.na(campus), edad &lt; 44) %&gt;%\n  mutate(grupo_edad = cut(edad, breaks = seq(14, 44, by = 2), right = FALSE))\n\n# 2. Datos por campus\npor_campus &lt;- datos_plot %&gt;%\n  group_by(campus, grupo_edad) %&gt;%\n  summarise(n = n(), .groups = \"drop\") %&gt;%\n  group_by(campus) %&gt;%\n  mutate(pct = round(100 * n / sum(n), 1)) %&gt;%\n  ungroup()\n\n# 3. Datos totales (\"Todos\")\ntodos &lt;- datos_plot %&gt;%\n  group_by(grupo_edad) %&gt;%\n  summarise(n = n(), .groups = \"drop\") %&gt;%\n  mutate(campus = \"Todos\") %&gt;%\n  mutate(pct = round(100 * n / sum(n), 1))\n\n# 4. Combinar\ndatos_final &lt;- bind_rows(por_campus, todos) %&gt;%\n  mutate(etiqueta = paste0(\"Campus: \", campus, \"&lt;br&gt;\",\n                           \"Edad: \", grupo_edad, \"&lt;br&gt;\",\n                           \"Porcentaje: \", pct, \"%\"))\n\n# 5. Crear gráfico interactivo con filtro\nplot_ly(\n  data = datos_final,\n  x = ~grupo_edad,\n  y = ~pct,\n  type = \"bar\",\n  text = ~etiqueta,\n  textposition = \"outside\",\n  hoverinfo = \"text\",  # &lt;&lt;-- evita duplicados\n  transforms = list(\n    list(\n      type = 'filter',\n      target = ~campus,\n      operation = '=',\n      value = \"Todos\"  # valor por defecto\n    )\n  )\n) %&gt;%\n  layout(\n    title = \"Distribución porcentual de la Edad por campus (hasta 40 años)\",\n    xaxis = list(title = \"Edad (intervalos de 2 años)\", tickangle = -45),\n    yaxis = list(title = \"Porcentaje\", ticksuffix = \"%\"),\n    updatemenus = list(\n      list(\n        type = 'dropdown',\n        active = 0,\n        buttons = lapply(unique(datos_final$campus), function(c) {\n          list(method = \"restyle\",\n               args = list(\"transforms[0].value\", c),\n               label = c)\n        })\n      )\n    )\n  )\nlibrary(dplyr)\nlibrary(plotly)\n\n# 1. Agrupar por intervalos de edad y campus\ndatos_plot &lt;- datos %&gt;%\n  filter(!is.na(edad), !is.na(campus), edad &lt; 44) %&gt;%\n  mutate(grupo_edad = cut(edad, breaks = seq(14, 44, by = 2), right = FALSE))\n\n# 2. Datos por campus\npor_campus &lt;- datos_plot %&gt;%\n  group_by(campus, grupo_edad) %&gt;%\n  summarise(n = n(), .groups = \"drop\") %&gt;%\n  group_by(campus) %&gt;%\n  mutate(pct = round(100 * n / sum(n), 1)) %&gt;%\n  ungroup()\n\n# 3. Datos totales (\"Todos\")\ntodos &lt;- datos_plot %&gt;%\n  group_by(grupo_edad) %&gt;%\n  summarise(n = n(), .groups = \"drop\") %&gt;%\n  mutate(campus = \"Todos\") %&gt;%\n  mutate(pct = round(100 * n / sum(n), 1))\n\n# 4. Combinar\ndatos_final &lt;- bind_rows(por_campus, todos) %&gt;%\n  mutate(etiqueta = paste0(\"Campus: \", campus, \"&lt;br&gt;\",\n                           \"Edad: \", grupo_edad, \"&lt;br&gt;\",\n                           \"Porcentaje: \", pct, \"%\"))\n\n# 5. Gráfico interactivo sin texto visible permanente\nplot_ly(\n  data = datos_final,\n  x = ~grupo_edad,\n  y = ~pct,\n  type = \"bar\",\n  text = ~etiqueta,\n  hoverinfo = \"text\",  # Solo aparece al pasar el mouse\n  transforms = list(\n    list(\n      type = 'filter',\n      target = ~campus,\n      operation = '=',\n      value = \"Todos\"\n    )\n  )\n) %&gt;%\n  layout(\n    title = \"Distribución porcentual de la Edad por campus (hasta 40 años)\",\n    xaxis = list(title = \"Edad (intervalos de 2 años)\", tickangle = -45),\n    yaxis = list(title = \"Porcentaje\", ticksuffix = \"%\"),\n    updatemenus = list(\n      list(\n        type = 'dropdown',\n        active = 0,\n        buttons = lapply(unique(datos_final$campus), function(c) {\n          list(method = \"restyle\",\n               args = list(\"transforms[0].value\", c),\n               label = c)\n        })\n      )\n    )\n  )\nlibrary(dplyr)\nlibrary(plotly)\n\n# 1. Agrupar por intervalos de edad y campus\ndatos_plot &lt;- datos %&gt;%\n  filter(!is.na(edad), !is.na(campus), edad &lt; 44) %&gt;%\n  mutate(grupo_edad = cut(edad, breaks = seq(14, 44, by = 2), right = FALSE))\n\n# 2. Datos por campus\npor_campus &lt;- datos_plot %&gt;%\n  group_by(campus, grupo_edad) %&gt;%\n  summarise(n = n(), .groups = \"drop\") %&gt;%\n  group_by(campus) %&gt;%\n  mutate(pct = round(100 * n / sum(n), 1)) %&gt;%\n  ungroup()\n\n# 3. Datos totales (\"Todos\")\ntodos &lt;- datos_plot %&gt;%\n  group_by(grupo_edad) %&gt;%\n  summarise(n = n(), .groups = \"drop\") %&gt;%\n  mutate(campus = \"Todos\") %&gt;%\n  mutate(pct = round(100 * n / sum(n), 1))\n\n# 4. Combinar\ndatos_final &lt;- bind_rows(por_campus, todos) %&gt;%\n  mutate(hover_text = paste0(\n    \"Campus: \", campus, \"&lt;br&gt;\",\n    \"Edad: \", grupo_edad, \"&lt;br&gt;\",\n    \"Porcentaje: \", pct, \"%\"\n  ))\n\n# 5. Gráfico sin etiquetas visibles, solo en hover\nplot_ly(\n  data = datos_final,\n  x = ~grupo_edad,\n  y = ~pct,\n  type = \"bar\",\n  hovertext = ~hover_text,\n  hoverinfo = \"text\",\n  transforms = list(\n    list(\n      type = 'filter',\n      target = ~campus,\n      operation = '=',\n      value = \"Todos\"\n    )\n  )\n) %&gt;%\n  layout(\n    title = \"Distribución porcentual de la Edad por campus (hasta 40 años)\",\n    xaxis = list(title = \"Edad (intervalos de 2 años)\", tickangle = -45),\n    yaxis = list(title = \"Porcentaje\", ticksuffix = \"%\"),\n    updatemenus = list(\n      list(\n        type = 'dropdown',\n        active = 0,\n        buttons = lapply(unique(datos_final$campus), function(c) {\n          list(method = \"restyle\",\n               args = list(\"transforms[0].value\", c),\n               label = c)\n        })\n      )\n    )\n  )\nlibrary(dplyr)\nlibrary(plotly)\n\n# 1. Filtrar y agrupar por estado civil y campus\ndatos_plot &lt;- datos %&gt;%\n  filter(!is.na(campus), !is.na(est_civ), campus %in% c(\"Bucaramanga\", \"Cúcuta\", \"Valledupar\")) %&gt;%\n  group_by(campus, est_civ) %&gt;%\n  summarise(n = n(), .groups = \"drop\")\n\n# 2. Datos para 'Todos'\ntodos &lt;- datos %&gt;%\n  filter(!is.na(est_civ)) %&gt;%\n  group_by(est_civ) %&gt;%\n  summarise(n = n(), .groups = \"drop\") %&gt;%\n  mutate(campus = \"Todos\")\n\n# 3. Combinar\ndatos_final &lt;- bind_rows(datos_plot, todos)\n\n# 4. Crear gráfico de pastel con filtro\nfig &lt;- plot_ly(type = 'pie', hole = 0.3)  # Gráfico vacío base\n\n# Campus únicos\ncampus_niveles &lt;- unique(datos_final$campus)\n\n# Añadir una traza por cada campus\nfor (i in seq_along(campus_niveles)) {\n  datos_c &lt;- datos_final %&gt;% filter(campus == campus_niveles[i])\n  fig &lt;- fig %&gt;% add_trace(\n    labels = datos_c$est_civ,\n    values = datos_c$n,\n    name = campus_niveles[i],\n    visible = ifelse(i == 1, TRUE, FALSE),  # Solo el primero visible\n    type = \"pie\",\n    textinfo = \"percent+label\",\n    sort = FALSE,\n    direction = \"clockwise\",\n    rotation = 90\n  )\n}\n\n# 5. Dropdown para filtros\nfig &lt;- fig %&gt;% layout(\n  title = \"Distribución del estado civil por campus\",\n  showlegend = TRUE,\n  updatemenus = list(list(\n    active = 0,\n    type = \"dropdown\",\n    buttons = lapply(seq_along(campus_niveles), function(i) {\n      list(\n        method = \"restyle\",\n        args = list(\"visible\", as.list(seq_along(campus_niveles) == i)),\n        label = campus_niveles[i]\n      )\n    })\n  ))\n)\n\nfig\nlibrary(dplyr)\nlibrary(plotly)\n\n# 1. Agrupar datos por campus y estado civil\ndatos_plot &lt;- datos %&gt;%\n  filter(!is.na(campus), !is.na(est_civ), campus %in% c(\"Bucaramanga\", \"Cúcuta\", \"Valledupar\")) %&gt;%\n  group_by(campus, est_civ) %&gt;%\n  summarise(n = n(), .groups = \"drop\")\n\n# 2. Datos combinados para \"Todos\"\ntodos &lt;- datos %&gt;%\n  filter(!is.na(est_civ)) %&gt;%\n  group_by(est_civ) %&gt;%\n  summarise(n = n(), .groups = \"drop\") %&gt;%\n  mutate(campus = \"Todos\")\n\n# 3. Combinar todos los campus\ndatos_final &lt;- bind_rows(datos_plot, todos)\n\n# 4. Crear gráfico con filtro interactivo sin agujero\nfig &lt;- plot_ly(type = 'pie')  # SIN `hole = 0.3`\n\n# Campus disponibles\ncampus_niveles &lt;- unique(datos_final$campus)\n\n# Añadir una traza por campus\nfor (i in seq_along(campus_niveles)) {\n  datos_c &lt;- datos_final %&gt;% filter(campus == campus_niveles[i])\n  fig &lt;- fig %&gt;% add_trace(\n    labels = datos_c$est_civ,\n    values = datos_c$n,\n    name = campus_niveles[i],\n    visible = ifelse(i == 1, TRUE, FALSE),  # Solo visible el primero\n    type = \"pie\",\n    textinfo = \"percent+label\",\n    sort = FALSE,\n    direction = \"clockwise\",\n    rotation = 90\n  )\n}\n\n# 5. Filtro interactivo (dropdown)\nfig &lt;- fig %&gt;% layout(\n  title = \"Distribución del estado civil por campus\",\n  showlegend = TRUE,\n  updatemenus = list(list(\n    active = 0,\n    type = \"dropdown\",\n    buttons = lapply(seq_along(campus_niveles), function(i) {\n      list(\n        method = \"restyle\",\n        args = list(\"visible\", as.list(seq_along(campus_niveles) == i)),\n        label = campus_niveles[i]\n      )\n    })\n  ))\n)\n\nfig\nlibrary(dplyr)\nlibrary(plotly)\nlibrary(RColorBrewer)\n\n# 1. Preparar los datos (campus y estado civil)\ndatos_plot &lt;- datos %&gt;%\n  filter(!is.na(campus), !is.na(est_civ), campus %in% c(\"Bucaramanga\", \"Cúcuta\", \"Valledupar\")) %&gt;%\n  group_by(campus, est_civ) %&gt;%\n  summarise(n = n(), .groups = \"drop\")\n\n# 2. Agregar \"Todos\"\ntodos &lt;- datos %&gt;%\n  filter(!is.na(est_civ)) %&gt;%\n  count(est_civ, name = \"n\") %&gt;%\n  mutate(campus = \"Todos\")\n\n# 3. Unir todos\ndatos_final &lt;- bind_rows(datos_plot, todos)\n\n# 4. Lista de campus\nniveles_campus &lt;- unique(datos_final$campus)\n\n# 5. Paleta pastel (tantos colores como categorías de estado civil)\ncolores_pastel &lt;- brewer.pal(n = max(3, length(unique(datos_final$est_civ))), name = \"Pastel1\")\n\n# 6. Crear gráfico base con todas las trazas invisibles excepto la inicial\nfig &lt;- plot_ly(type = \"pie\")\n\nfor (i in seq_along(niveles_campus)) {\n  datos_c &lt;- datos_final %&gt;% filter(campus == niveles_campus[i])\n  \n  fig &lt;- fig %&gt;% add_trace(\n    labels = datos_c$est_civ,\n    values = datos_c$n,\n    type = \"pie\",\n    name = niveles_campus[i],\n    visible = ifelse(i == 1, TRUE, FALSE),\n    textinfo = \"label+percent\",\n    hoverinfo = \"label+percent+value\",\n    sort = FALSE,\n    marker = list(colors = colores_pastel),\n    direction = \"clockwise\",\n    rotation = 90\n  )\n}\n\n# 7. Layout con menú desplegable\nfig &lt;- fig %&gt;% layout(\n  title = \"Distribución del estado civil por campus\",\n  showlegend = TRUE,\n  updatemenus = list(list(\n    type = \"dropdown\",\n    direction = \"down\",\n    x = 0.1, y = 1.2,\n    buttons = lapply(seq_along(niveles_campus), function(i) {\n      visibilidad &lt;- rep(FALSE, length(niveles_campus))\n      visibilidad[i] &lt;- TRUE\n      list(method = \"restyle\",\n           args = list(\"visible\", visibilidad),\n           label = niveles_campus[i])\n    })\n  ))\n)\n\nfig\nlibrary(dplyr)\nlibrary(plotly)\nlibrary(RColorBrewer)\n\n# 1. Preparar los datos (campus y sexo)\ndatos_plot &lt;- datos %&gt;%\n  filter(!is.na(campus), !is.na(sexo_id), campus %in% c(\"Bucaramanga\", \"Cúcuta\", \"Valledupar\")) %&gt;%\n  group_by(campus, sexo_id) %&gt;%\n  summarise(n = n(), .groups = \"drop\")\n\n# 2. Agregar \"Todos\"\ntodos &lt;- datos %&gt;%\n  filter(!is.na(sexo_id)) %&gt;%\n  count(sexo_id, name = \"n\") %&gt;%\n  mutate(campus = \"Todos\")\n\n# 3. Unir todos\ndatos_final &lt;- bind_rows(datos_plot, todos)\n\n# 4. Lista de campus\nniveles_campus &lt;- unique(datos_final$campus)\n\n# 5. Paleta pastel (tantos colores como categorías de estado civil)\ncolores_pastel &lt;- brewer.pal(n = max(3, length(unique(datos_final$est_civ))), name = \"Pastel1\")\n\nWarning: Unknown or uninitialised column: `est_civ`.\n\n# 6. Crear gráfico base con todas las trazas invisibles excepto la inicial\nfig &lt;- plot_ly(type = \"pie\")\n\nfor (i in seq_along(niveles_campus)) {\n  datos_c &lt;- datos_final %&gt;% filter(campus == niveles_campus[i])\n  \n  fig &lt;- fig %&gt;% add_trace(\n    labels = datos_c$sexo_id,\n    values = datos_c$n,\n    type = \"pie\",\n    name = niveles_campus[i],\n    visible = ifelse(i == 1, TRUE, FALSE),\n    textinfo = \"label+percent\",\n    hoverinfo = \"label+percent+value\",\n    sort = FALSE,\n    marker = list(colors = colores_pastel),\n    direction = \"clockwise\",\n    rotation = 90\n  )\n}\n\n# 7. Layout con menú desplegable\nfig &lt;- fig %&gt;% layout(\n  title = \"Distribución del sexo por campus\",\n  showlegend = TRUE,\n  updatemenus = list(list(\n    type = \"dropdown\",\n    direction = \"down\",\n    x = 0.1, y = 1.2,\n    buttons = lapply(seq_along(niveles_campus), function(i) {\n      visibilidad &lt;- rep(FALSE, length(niveles_campus))\n      visibilidad[i] &lt;- TRUE\n      list(method = \"restyle\",\n           args = list(\"visible\", visibilidad),\n           label = niveles_campus[i])\n    })\n  ))\n)\n\nfig\nlibrary(dplyr)\nlibrary(plotly)\n\n# 1. Preparar los datos: cuenta y porcentaje\nestado_civil_df &lt;- datos %&gt;%\n  filter(!is.na(est_civ)) %&gt;%\n  count(est_civ) %&gt;%\n  mutate(pct = round(100 * n / sum(n), 1),\n         label = paste0(est_civ, \": \", pct, \"%\"))\n\n# 2. Gráfico de pastel interactivo\nplot_ly(\n  data = estado_civil_df,\n  labels = ~est_civ,\n  values = ~pct,\n  type = 'pie',\n  textinfo = 'label+percent',\n  hoverinfo = 'text',\n  text = ~label,\n  marker = list(colors = RColorBrewer::brewer.pal(n = max(3, nrow(estado_civil_df)), name = \"Pastel1\"))\n) %&gt;%\n  layout(\n    title = \"Estado civil de los estudiantes\",\n    showlegend = TRUE\n  )\nlibrary(dplyr)\nlibrary(plotly)\n\n# 1. Agrupar por campus y estado civil\nestado_civil_df &lt;- datos %&gt;%\n  filter(!is.na(campus), !is.na(est_civ)) %&gt;%\n  count(campus, est_civ, name = \"n\") %&gt;%\n  group_by(campus) %&gt;%\n  mutate(pct = round(100 * n / sum(n), 1)) %&gt;%\n  ungroup()\n\n# 2. Agregar una categoría \"Todos\"\ntodos_df &lt;- datos %&gt;%\n  filter(!is.na(est_civ)) %&gt;%\n  count(est_civ, name = \"n\") %&gt;%\n  mutate(campus = \"Todos\",\n         pct = round(100 * n / sum(n), 1))\n\n# 3. Combinar ambas\nestado_civil_full &lt;- bind_rows(estado_civil_df, todos_df)\n\n# 4. Crear gráfico interactivo\nplot_ly(\n  data = estado_civil_full %&gt;% filter(campus == \"Todos\"),\n  labels = ~est_civ,\n  values = ~pct,\n  type = 'pie',\n  textinfo = 'label+percent',\n  insidetextorientation = 'radial',\n  transforms = list(\n    list(\n      type = 'filter',\n      target = ~campus,\n      operation = '=',\n      value = \"Todos\"\n    )\n  )\n) %&gt;%\n  layout(\n    title = \"Distribución de estado civil por campus\",\n    updatemenus = list(\n      list(\n        type = 'dropdown',\n        active = 0,\n        buttons = lapply(unique(estado_civil_full$campus), function(c) {\n          list(\n            method = \"restyle\",\n            args = list(\"transforms[0].value\", c),\n            label = c\n          )\n        })\n      )\n    )\n  )\nlibrary(dplyr)\nlibrary(plotly)\nlibrary(RColorBrewer)\n\n# 1. Preparar los datos (campus y estado civil)\ndatos_plot &lt;- datos %&gt;%\n  filter(!is.na(campus), !is.na(est_civ), campus %in% c(\"Bucaramanga\", \"Cúcuta\", \"Valledupar\")) %&gt;%\n  group_by(campus, prog_abrev) %&gt;%\n  summarise(n = n(), .groups = \"drop\")\n\n# 2. Agregar \"Todos\"\ntodos &lt;- datos %&gt;%\n  filter(!is.na(prog_abrev)) %&gt;%\n  count(est_civ, name = \"n\") %&gt;%\n  mutate(campus = \"Todos\")\n\n# 3. Unir todos\ndatos_final &lt;- bind_rows(datos_plot, todos)\n\n# 4. Lista de campus\nniveles_campus &lt;- unique(datos_final$campus)\n\n\nplot_ly(data=datos, x = ~campus, y = ~edad, color = ~campus, type = \"box\")\nlibrary(plotly)\nplot_ly(data=datos, x = ~ prog_abrev, y = ~edad, color = ~prog_abrev, type = \"box\")\n\nWarning in RColorBrewer::brewer.pal(N, \"Set2\"): n too large, allowed maximum for palette Set2 is 8\nReturning the palette you asked for with that many colors\nWarning in RColorBrewer::brewer.pal(N, \"Set2\"): n too large, allowed maximum for palette Set2 is 8\nReturning the palette you asked for with that many colors\n\n\n\n\n\nshowlegend = FALSE  # 👈 Asegurar que se oculte la leyenda general\n\n# Convertir columnas de texto a UTF-8\ndatos &lt;- datos %&gt;%\n  mutate(across(where(is.character), ~ iconv(., from = \"\", to = \"UTF-8\")))\n\ndatos &lt;- datos %&gt;%\n  mutate(across(where(is.character), ~ iconv(., from = \"\", to = \"UTF-8\", sub = \"\")))\n\n# Buscar caracteres no válidos en 'programa'\nproblemas &lt;- datos %&gt;%\n  filter(!is.na(prog_abrev)) %&gt;%\n  filter(is.na(iconv(prog_abrev, from = \"\", to = \"UTF-8\")))\n\nprint(problemas$prog_abrev)\n\ncharacter(0)\nlibrary(dplyr)\nlibrary(plotly)\n\n# Asegurar codificación UTF-8\ndatos &lt;- datos %&gt;%\n  mutate(across(where(is.character), ~ iconv(., from = \"\", to = \"UTF-8\", sub = \"\")))\n\n# Agregar opción \"Todos\"\ndatos_todos &lt;- datos %&gt;%\n  filter(!is.na(prog_abrev), !is.na(edad)) %&gt;%\n  mutate(campus = \"Todos\")\n\ndatos_final &lt;- bind_rows(datos, datos_todos)\n\n# Niveles de campus\nniveles_campus &lt;- c(\"Todos\", \"Bucaramanga\", \"Cucuta\", \"Valledupar\")\n\n# Crear gráfico base con todas las trazas (una por campus)\nfig &lt;- plot_ly()\n\nfor (i in seq_along(niveles_campus)) {\n  datos_c &lt;- datos_final %&gt;% filter(campus == niveles_campus[i])\n  \n  fig &lt;- fig %&gt;%\n    add_boxplot(\n      data = datos_c,\n      x = ~prog_abrev,\n      y = ~edad,\n      name = niveles_campus[i],\n      visible = ifelse(i == 1, TRUE, FALSE),  # Solo la primera visible\n      boxpoints = \"outliers\",\n      marker = list(color = \"#6BAED6\"),\n      line = list(color = \"#2171B5\")\n    )\n}\n\n# Layout con menú desplegable para filtrar por campus\nfig &lt;- fig %&gt;%\n  layout(\n    title = \"Distribución de edad por programa y campus\",\n    yaxis = list(title = \"Edad\"),\n    xaxis = list(title = \"Programa\", tickangle = -45),\n    showlegend = FALSE,\n    updatemenus = list(\n      list(\n        type = \"dropdown\",\n        direction = \"down\",\n        x = 0.1,\n        y = 1.2,\n        buttons = lapply(seq_along(niveles_campus), function(i) {\n          visibilidad &lt;- rep(FALSE, length(niveles_campus))\n          visibilidad[i] &lt;- TRUE\n          list(\n            method = \"restyle\",\n            args = list(\"visible\", visibilidad),\n            label = niveles_campus[i]\n          )\n        })\n      )\n    )\n  )\n\nfig\nlibrary(dplyr)\nlibrary(plotly)\n\n# 1. Agrupar por intervalos de edad y campus\ndatos_plot &lt;- datos %&gt;%\n  filter(!is.na(edad), !is.na(campus), edad &lt; 44) %&gt;%\n  mutate(grupo_edad = cut(edad, breaks = seq(14, 44, by = 2), right = FALSE))\n\n# 2. Datos por campus\npor_campus &lt;- datos_plot %&gt;%\n  group_by(campus, grupo_edad) %&gt;%\n  summarise(n = n(), .groups = \"drop\") %&gt;%\n  group_by(campus) %&gt;%\n  mutate(pct = round(100 * n / sum(n), 1)) %&gt;%\n  ungroup()\n\n# 3. Datos totales (\"Todos\")\ntodos &lt;- datos_plot %&gt;%\n  group_by(grupo_edad) %&gt;%\n  summarise(n = n(), .groups = \"drop\") %&gt;%\n  mutate(campus = \"Todos\") %&gt;%\n  mutate(pct = round(100 * n / sum(n), 1))\n\n# 4. Combinar\ndatos_final &lt;- bind_rows(por_campus, todos) %&gt;%\n  mutate(hover_text = paste0(\n    \"Campus: \", campus, \"&lt;br&gt;\",\n    \"Edad: \", grupo_edad, \"&lt;br&gt;\",\n    \"Porcentaje: \", pct, \"%\"\n  ))\n\n# 5. Fijar niveles con \"Todos\" primero\nniveles_campus &lt;- c(\"Todos\", \"Bucaramanga\", \"Cucuta\", \"Valledupar\")\ndatos_final$campus &lt;- factor(datos_final$campus, levels = niveles_campus)\n\n# 6. Gráfico con filtro por campus\nplot_ly(\n  data = datos_final,\n  x = ~grupo_edad,\n  y = ~pct,\n  type = \"bar\",\n  hovertext = ~hover_text,\n  hoverinfo = \"text\",\n  transforms = list(\n    list(\n      type = 'filter',\n      target = ~campus,\n      operation = '=',\n      value = \"Todos\"  # Valor por defecto\n    )\n  )\n) %&gt;%\n  layout(\n    title = \"Distribución porcentual de la Edad por campus (hasta 40 años)\",\n    xaxis = list(title = \"Edad (intervalos de 2 años)\", tickangle = -45),\n    yaxis = list(title = \"Porcentaje\", ticksuffix = \"%\"),\n    updatemenus = list(\n      list(\n        type = 'dropdown',\n        active = 0,\n        buttons = lapply(niveles_campus, function(c) {\n          list(method = \"restyle\",\n               args = list(\"transforms[0].value\", c),\n               label = c)\n        })\n      )\n    )\n  )\nlibrary(dplyr)\nlibrary(plotly)\nlibrary(RColorBrewer)\n\n# 1. Preparar los datos\ndatos_plot &lt;- datos %&gt;%\n  filter(!is.na(campus), !is.na(pais), campus %in% c(\"Bucaramanga\", \"Cúcuta\", \"Valledupar\")) %&gt;%\n  group_by(campus, pais) %&gt;%\n  summarise(n = n(), .groups = \"drop\")\n\n# 2. Agregar \"Todos\"\ntodos &lt;- datos %&gt;%\n  filter(!is.na(pais)) %&gt;%\n  count(pais, name = \"n\") %&gt;%\n  mutate(campus = \"Todos\")\n\n# 3. Fijar niveles con \"Todos\" primero\nniveles_campus &lt;- c(\"Todos\", \"Bucaramanga\", \"Cúcuta\", \"Valledupar\")\n\n# 4. Unir todo\ndatos_final &lt;- bind_rows(datos_plot, todos) %&gt;%\n  mutate(campus = factor(campus, levels = niveles_campus))\n\n# 5. Pie chart con filtro por campus\nplot_ly(\n  data = datos_final,\n  labels = ~pais,\n  values = ~n,\n  type = \"pie\",\n  textinfo = \"label+percent\",\n  hoverinfo = \"label+percent+value\",\n  marker = list(colors = brewer.pal(8, \"Pastel1\")),\n  rotation = 270,\n  transforms = list(\n    list(\n      type = 'filter',\n      target = ~campus,\n      operation = '=',\n      value = \"Todos\"\n    )\n  )\n) %&gt;%\n  layout(\n    title = \"Distribución del país de origen por campus\",\n    updatemenus = list(\n      list(\n        type = 'dropdown',\n        active = 0,\n        buttons = lapply(niveles_campus, function(c) {\n          list(method = \"restyle\",\n               args = list(\"transforms[0].value\", c),\n               label = c)\n        })\n      )\n    )\n  )",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Campus Filtro</span>"
    ]
  }
]