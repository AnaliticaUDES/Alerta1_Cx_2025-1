[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Alerta 1. Analítica Académica",
    "section": "",
    "text": "Créditos\n\n\n\n\nDirectivas\nAutores\n\n\n\n\nRector General\nJosé Patricio López Jaramillo\nRectora Campus Cúcuta\nCarmen Elisa Araque Pérez\nRector Campus Valledupar\nCarlos Darío Morón Cuello\nVicerrector de Enseñanza\nCesar Augusto Serrano Novoa\nDirectora Administrativa y Financiera\nAngélica María Calderón Plata\nDirectora de Desarrollo Estudiantil\nSilvia Juliana Suescún Garcés\nDirectora de Bienestar Institucional\nAna Francisca Martínez Quintero\nDirector de Analítica Académica1\nMiguel Oswaldo Pérez Pulido\n\nCoordinador de Analítica Académica\nFrancisco Javier León\n\nProfesional en Investigación de Mercados\nLeonardo Andrés Pinto Guarguatí  \n\nDirector de Gestión Curricular \nOmar Camilo Mejía Ardila\n\n\n\n\n1 Si desea obtener más información estadística académica de este documento de trabajo o de la Institución puede consultar el micrositio en el Observatorio de Analítica Académica o por correo electrónico analitica.academica@udes.edu.co \n\n\n\n\n\nPara citar\n\n\n\nPérez, M., León, F., Pinto, L., y Mejía, O. (2025). Documento de Analítica Académica No 28. Caracterización de estudiantes presenciales de pregrado recién ingreso periodo 2025-1. Universidad de Santander. Vicerrectoría de Enseñanza. https://udes.edu.co/ensenanza/dependencias/analitica-academica/informes-y-documentos.\n\n\n\n\n\n\n\n\nDerechos de Autor\n\n\n\nUniversidad de Santander (UDES)\nCalle 70 #N° 55-210\nBucaramanga, Santander, Colombia\nhttps://www.udes.edu.co/",
    "crumbs": [
      "Créditos"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introducción",
    "section": "",
    "text": "La caracterización de estudiantes es una herramienta fundamental que permite a la Universidad conocer a los alumnos de nuevo ingreso, analizando aspectos socioeconómicos, académicos, culturales y biopsicosociales. Su propósito principal es ofrecer un acercamiento integral al estudiante, facilitando la identificación de factores que influyen en su desempeño y bienestar durante la vida universitaria.\nEste proceso no solo beneficia a los estudiantes, al proporcionar alertas y recomendaciones sobre hábitos de autocuidado, sino también a la Universidad, al optimizar los programas y servicios de Bienestar Institucional. A través de la recopilación de datos, se construye un perfil general del estudiante UDES, permitiendo identificar aspectos clave como salud, seguridad social, situación académica, condiciones sociofamiliares, nivel socioeconómico, empleo, bienestar psicológico y afectivo, identidad de género, orientación sexual, nutrición y actividad física, entre otros.\nEn el segundo semestre de 2024, se implementaron actualizaciones en la caracterización estudiantil, especialmente en las secciones de aspectos sociodemográficos y salud integral. Entre las nuevas preguntas, se incluyeron temas sobre movilidad, como el tipo de combustible utilizado en los vehículos de los estudiantes, su medio de transporte habitual para llegar a la Universidad y la posibilidad de compartirlo con otros compañeros de la misma zona. En el ámbito de salud integral, se incorporaron interrogantes relacionadas con la pertenencia a grupos poblacionales y étnicos, identidad de género y orientación sexual, con el fin de fomentar un ambiente universitario más inclusivo y diverso.\nGracias a esta caracterización, la Universidad podrá reconocer mejor las necesidades de los estudiantes de primer ingreso y orientar acciones de intervención que contribuyan a su adaptación y éxito académico.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción</span>"
    ]
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "2  Aspectos metodológicos",
    "section": "",
    "text": "2.1 Ficha técnica",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Aspectos metodológicos</span>"
    ]
  },
  {
    "objectID": "summary.html#ficha-técnica",
    "href": "summary.html#ficha-técnica",
    "title": "2  Aspectos metodológicos",
    "section": "",
    "text": "Categoría\nDescripción\n\n\n\n\nPoblación objetivo\nEstudiantes de recién ingreso a la Universidad de Santander en el periodo 2025-1\n\n\nCampus\nBucaramanga, Cúcuta, Valledupar\n\n\nTotal estudiantes\n\n\n\nMétodo de recolección de datos\nFormulario multicampus (111 preguntas)\n\n\nAspectos evaluados\nSesión 1. Información personal y académica\nSesión 2. Aspectos sociodemográficos\nSesión 3. Salud integral\nSesión 4. Fomento de la cultura\nSesión 5. Deportes y esparcimiento\nSesión 6. Desarrollo humano\n\n\nPeriodo de aplicación\n03 de febrero al 03 de marzo de 2025\n\n\nTasa de respuesta\n\n\n\nHerramienta de tabulación\nExcel, RStudio",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Aspectos metodológicos</span>"
    ]
  },
  {
    "objectID": "summary.html#número-de-estudiantes-encuestados",
    "href": "summary.html#número-de-estudiantes-encuestados",
    "title": "2  Aspectos metodológicos",
    "section": "2.2 Número de estudiantes encuestados",
    "text": "2.2 Número de estudiantes encuestados\nLa encuesta se aplicó a estudiantes de primer semestre, y en el gráfico se muestra la cantidad de estudiantes que la respondieron, distribuidos por programa académico y campus.\n\n\n\n\n\n\n\n\n\n\n\n\nAbreviaturas de programas académicos\n\n\n\n ANTR: Antropología, INQU: Instrumentación Quirúrgica, MYPB: Mercadeo y Publicidad, ADFI: Administración Financiera, TEOC: Terapia Ocupacional, FONO: Fonoaudiología, FISI: Fisioterapia, ININ: Ingeniería Industrial, TCGF: Tecnología en Comunicación Gráfica, BACT: Bacteriología y Laboratorio Clínico, MEDI: Medicina, ADNI: Administración de Negocios Internacionales, INCI: Ingeniería Civil, PSIC: Psicología, LEIN: Licenciatura en Educación Infantil, ENFE: Enfermería, DERE: Derecho, MBIN: Microbiología Industrial, MEVE: Medicina Veterinaria, INAG: Ingeniería Agroindustrial, INSO: Ingeniería de Software, CONT: Contaduría Pública, TSOC: Tecnología en Supervisión de Obras Civiles, COSP: Comunicación Social y Periodismo, GEOL: Geología, ICCI: Ingeniería en Ciencias de la Computación e Inteligencia Artificial, INSI: Ingeniería de Sistemas, DIGR: Diseño Gráfico, COEX: Comercio Exterior, MVZC: Medicina Veterinaria y Zootecnia, IQBO: Instrumentación Quirúrgica (Bogotá), TLAC: Técnico Laboral en Competencias para Auxiliar de Clínica Veterinaria.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Aspectos metodológicos</span>"
    ]
  },
  {
    "objectID": "summary.html#tasa-de-respuesta",
    "href": "summary.html#tasa-de-respuesta",
    "title": "2  Aspectos metodológicos",
    "section": "2.3 Tasa de respuesta",
    "text": "2.3 Tasa de respuesta\nFalta hacer estas tablas—- muestra la cantidad de estudiantes que la respondieron, distribuidos por programa académico y campus.\n\n\n\n\n\n\n\n\n\nProgramas\nRespuesta encuesta\nMatriculados primer semestre\n% de respuesta\n\n\nAdministración de negocios internacionales\n15\n16\n94\n\n\nAministración financiera\n18\n23\n78\n\n\nAntropología\n7\n7\n100\n\n\nBacteriología y laboratorio clínico\n29\n29\n100\n\n\nComunicación social y periodismo\n9\n10\n90\n\n\nContaduría pública\n10\n10\n100\n\n\nDerecho\n13\n20\n65\n\n\nEnfermería\n18\n24\n75\n\n\nFisioterapia\n28\n37\n76\n\n\nFonoaudiología\n18\n19\n95\n\n\nGeología\n5\n9\n56\n\n\nIngeniería agroindustrial\n9\n11\n82\n\n\nIngeniería civil\n15\n20\n75\n\n\nIngeniería de software\n56\n60\n93\n\n\nIngeniería en ciencias de la computación e inteligencia artificial\n8\n10\n80\n\n\nIngeniería industrial\n7\n9\n78\n\n\nInstrumentación quirúrgica\n51\n52\n98\n\n\nInstrumentación quirúrgica - BOG\n27\n28\n96\n\n\nLicenciatura en educación infantil\n11\n11\n100\n\n\nMedicina\n51\n57\n89\n\n\nMedicina veterinaria\n66\n73\n90\n\n\nMercadeo y publicidad\n26\n26\n100\n\n\nMicrobiología industrial\n14\n14\n100\n\n\nPsicología\n25\n25\n100\n\n\nTecnología en comunicación grafica\n22\n24\n92\n\n\nTecnología supervisión de obras civiles\n5\n5\n100\n\n\nTerapia ocupacional\n17\n17\n100\n\n\nTotal\n560\n646\n86",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Aspectos metodológicos</span>"
    ]
  },
  {
    "objectID": "Sesion1.html",
    "href": "Sesion1.html",
    "title": "3  Sesión 1. Información personal y Académica",
    "section": "",
    "text": "3.1 Distribución geográfica nacional\nLa distribución de los departamentos de procedencia de los estudiantes se refleja en el mapa, coSantander liderando la participación con un 69.3% del total de estudiantes. Le siguen Cesar con 9.9% y Norte de Santander con 5.1%, consolidándose como las regiones con mayor representación.\nLos demás departamentos registran una participación conjunta del 15.7%, destacando entre ellos Amazonas, Huila, Tolima y Antioquia, entre otros. Aunque su presencia es menor, su participación evidencia la diversidad geográfica de los estudiantes y el alcance regional de la institución.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Sesión 1. Información personal y Académica</span>"
    ]
  },
  {
    "objectID": "Sesion1.html#distribución-geográfica-departamental",
    "href": "Sesion1.html#distribución-geográfica-departamental",
    "title": "3  Sesión 1. Información personal y Académica",
    "section": "3.2 Distribución geográfica departamental",
    "text": "3.2 Distribución geográfica departamental\nLa distribución de los estudiantes en los municipios de Santander se refleja en el mapa. Bucaramanga concentra el 47.3% del total de estudiantes, mientras que el área metropolitana de Bucaramanga, incluyendo Floridablanca, Piedecuesta y Girón, alcanza una representación del 78.6%.\nPor su parte, Barrancabermeja registra una participación del 7.3%, siendo el municipio con mayor presencia fuera del área metropolitana. El resto de los municipios de Santander representan en conjunto el 14%.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Sesión 1. Información personal y Académica</span>"
    ]
  },
  {
    "objectID": "Sesion1.html#perfil-demográfico",
    "href": "Sesion1.html#perfil-demográfico",
    "title": "3  Sesión 1. Información personal y Académica",
    "section": "3.3 Perfil Demográfico",
    "text": "3.3 Perfil Demográfico\n\n\n\n\n\n\nDescripción de las gráficas de forma general\n\n\n\nEl 96% de estos estudiantes son solteros, y el 98% son colombianos. Además, también se encuentran estudiantes de origen español, ecuatoriano, estadounidense y venezolano y mexicano. En relación con el sexo, el 60,2% de los participantes eran mujeres y el 39,8% eran hombres.\nEn el campus Bucaramanga, la edad promedio de los estudiantes es de 18 años\nEsta gráfica muestra la distribución porcentual de estudiantes por país de origen. Se observa que la mayoría proviene de Colombia, seguida por países vecinos como Venezuela.\n\n\nEdad\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAbreviaturas de programas académicos\n\n\n\n ANTR: Antropología, INQU: Instrumentación Quirúrgica, MYPB: Mercadeo y Publicidad, ADFI: Administración Financiera, TEOC: Terapia Ocupacional, FONO: Fonoaudiología, FISI: Fisioterapia, ININ: Ingeniería Industrial, TCGF: Tecnología en Comunicación Gráfica, BACT: Bacteriología y Laboratorio Clínico, MEDI: Medicina, ADNI: Administración de Negocios Internacionales, INCI: Ingeniería Civil, PSIC: Psicología, LEIN: Licenciatura en Educación Infantil, ENFE: Enfermería, DERE: Derecho, MBIN: Microbiología Industrial, MEVE: Medicina Veterinaria, INAG: Ingeniería Agroindustrial, INSO: Ingeniería de Software, CONT: Contaduría Pública, TSOC: Tecnología en Supervisión de Obras Civiles, COSP: Comunicación Social y Periodismo, GEOL: Geología, ICCI: Ingeniería en Ciencias de la Computación e Inteligencia Artificial, INSI: Ingeniería de Sistemas, DIGR: Diseño Gráfico, COEX: Comercio Exterior, MVZC: Medicina Veterinaria y Zootecnia, IQBO: Instrumentación Quirúrgica (Bogotá), TLAC: Técnico Laboral en Competencias para Auxiliar de Clínica Veterinaria. \n\n\nEstado civil\n\n\n\n\n\n\n\n\n\n\n\n\nDescripción para todos los campus\n\n\n\nEsta gráfica muestra la distribución porcentual de estudiantes por país de origen. Se observa que la mayoría proviene de Colombia, seguida por países vecinos como Venezuela.\n\n\nSexo\n\n\n\n\n\n\n\n\n\n\n\n\nDescripción para todos los campus\n\n\n\nEsta gráfica muestra la distribución porcentual de estudiantes por país de origen. Se observa que la mayoría proviene de Colombia, seguida por países vecinos como Venezuela.\n\n\nPais de origen\n\n\n\n\n\n\n\n\n\n\n\n\nDescripción para todos los campus\n\n\n\nEsta gráfica muestra la distribución porcentual de estudiantes por país de origen. Se observa que la mayoría proviene de Colombia, seguida por países vecinos como Venezuela.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Sesión 1. Información personal y Académica</span>"
    ]
  },
  {
    "objectID": "filtro.html",
    "href": "filtro.html",
    "title": "4  Campus Filtro",
    "section": "",
    "text": "4.1 Distribución de Edad por Campus\nSeleccione un campus para visualizar la distribución de edad correspondiente. El gráfico se actualiza automáticamente con base en su selección.\nlibrary(dplyr)\nlibrary(plotly)\n\n# Preparar datos\ndata_plot_drop &lt;- datos |&gt;\n  filter(campus %in% c(\"Bucaramanga\", \"Cúcuta\", \"Valledupar\"), !is.na(edad)) |&gt;\n  mutate(campus_total = campus)  # duplicar para crear opción \"Todos\"\n\n# Agregar fila con etiqueta \"Todos\"\ndata_total &lt;- data_plot_drop |&gt; \n  mutate(campus = \"Todos\")  # etiqueta adicional\n\n# Combinar\ndata_all &lt;- bind_rows(data_plot_drop, data_total)\n\n# Lista de opciones del dropdown\ncampus_levels &lt;- unique(data_all$campus)\n\n# Crear gráfico interactivo\npd &lt;- data_all |&gt;\n  plot_ly(\n    type = 'histogram',\n    x = ~edad,\n    autobinx = FALSE,\n    xbins = list(start = 0, end = 40, size = 2),\n    marker = list(color = '#004899'),\n    transforms = list(\n      list(\n        type = 'filter',\n        target = ~campus,\n        operation = '=',\n        value = \"Todos\"  # Mostrar todos inicialmente\n      )\n    )\n  ) |&gt; layout(\n    title = \"Distribución de la Edad por Campus\",\n    xaxis = list(title = \"Edad\"),\n    yaxis = list(title = \"Frecuencia\"),\n    updatemenus = list(\n      list(\n        type = 'dropdown',\n        active = 0,\n        buttons = lapply(campus_levels, function(c) {\n          list(\n            method = \"restyle\",\n            args = list(\"transforms[0].value\", c),\n            label = c\n          )\n        })\n      )\n    )\n  )\n\npd\nlibrary(dplyr)\nlibrary(plotly)\n\n# Preparar datos\ndata_plot_drop &lt;- datos |&gt;\n  filter(campus %in% c(\"Bucaramanga\", \"Cúcuta\", \"Valledupar\"), !is.na(edad)) |&gt;\n  mutate(campus_total = campus)  # duplicar para crear opción \"Todos\"\n\n# Agregar fila con etiqueta \"Todos\"\ndata_total &lt;- data_plot_drop |&gt; \n  mutate(campus = \"Todos\")  # etiqueta adicional\n\n# 1. Agrupar edades por intervalos\ndatos_plot &lt;- datos %&gt;%\n  filter(!is.na(edad), !is.na(campus)) %&gt;%\n  mutate(grupo_edad = cut(edad, breaks = seq(14, 44, by = 2), right = FALSE)) %&gt;%\n  group_by(campus, grupo_edad) %&gt;%\n  summarise(n = n(), .groups = \"drop\") %&gt;%\n  group_by(campus) %&gt;%\n  mutate(pct = round(100 * n / sum(n), 1)) %&gt;%\n  ungroup()\n\n\n# 2. Crear gráfico con filtro interactivo\nplot_ly(\n  data = datos_plot,\n  x = ~grupo_edad,\n  y = ~pct,\n  type = \"bar\",\n  text = ~paste0(pct, \"%\"),\n  textposition = \"outside\",\n  transforms = list(\n    list(\n      type = 'filter',\n      target = ~campus,\n      operation = '=',\n      value = unique(datos_plot$campus)[1]\n    )\n  )\n) %&gt;%\n  layout(\n    title = \"Distribución porcentual de la Edad por campus (hasta 40 años)\",\n    xaxis = list(title = \"Edad (intervalos de 2 años)\", tickangle = -45),\n    yaxis = list(title = \"Porcentaje (%)\", ticksuffix = \"%\"),\n    updatemenus = list(\n      list(\n        type = 'dropdown',\n        active = 0,\n        buttons = lapply(unique(datos_plot$campus), function(c) {\n          list(method = \"restyle\",\n               args = list(\"transforms[0].value\", c),\n               label = c)\n        })\n      )\n    )\n  )\n\nWarning: Ignoring 2 observations\n# Buscar caracteres no válidos en 'programa'\nproblemas &lt;- datos %&gt;%\n  filter(!is.na(programa)) %&gt;%\n  filter(is.na(iconv(programa, from = \"\", to = \"UTF-8\")))\n\nprint(problemas$programa)\n\ncharacter(0)\nlibrary(dplyr)\nlibrary(plotly)\n\n# 1. Agrupar por intervalos de edad y campus\ndatos_plot &lt;- datos %&gt;%\n  filter(!is.na(edad), !is.na(campus), edad &lt; 44) %&gt;%\n  mutate(grupo_edad = cut(edad, breaks = seq(14, 44, by = 2), right = FALSE))\n\n# 2. Datos por campus\npor_campus &lt;- datos_plot %&gt;%\n  group_by(campus, grupo_edad) %&gt;%\n  summarise(n = n(), .groups = \"drop\") %&gt;%\n  group_by(campus) %&gt;%\n  mutate(pct = round(100 * n / sum(n), 1)) %&gt;%\n  ungroup()\n\n# 3. Datos totales (\"Todos\")\ntodos &lt;- datos_plot %&gt;%\n  group_by(grupo_edad) %&gt;%\n  summarise(n = n(), .groups = \"drop\") %&gt;%\n  mutate(campus = \"Todos\") %&gt;%\n  mutate(pct = round(100 * n / sum(n), 1))\n\n# 4. Combinar\ndatos_final &lt;- bind_rows(por_campus, todos)\n\n# 5. Crear gráfico interactivo con filtro\nplot_ly(\n  data = datos_final,\n  x = ~grupo_edad,\n  y = ~pct,\n  type = \"bar\",\n  text = ~paste0(pct, \"%\"),\n  textposition = \"outside\",\n  transforms = list(\n    list(\n      type = 'filter',\n      target = ~campus,\n      operation = '=',\n      value = \"Todos\"  # valor por defecto\n    )\n  )\n) %&gt;%\n  layout(\n    title = \"Distribución porcentual de la Edad por campus (hasta 40 años)\",\n    xaxis = list(title = \"Edad (intervalos de 2 años)\", tickangle = -45),\n    yaxis = list(title = \"Porcentaje\", ticksuffix = \"%\"),\n    updatemenus = list(\n      list(\n        type = 'dropdown',\n        active = 0,\n        buttons = lapply(unique(datos_final$campus), function(c) {\n          list(method = \"restyle\",\n               args = list(\"transforms[0].value\", c),\n               label = c)\n        })\n      )\n    )\n  )\nlibrary(dplyr)\nlibrary(plotly)\n\n# 1. Agrupar por intervalos de edad y campus\ndatos_plot &lt;- datos %&gt;%\n  filter(!is.na(edad), !is.na(campus), edad &lt; 44) %&gt;%\n  mutate(grupo_edad = cut(edad, breaks = seq(14, 44, by = 2), right = FALSE))\n\n# 2. Datos por campus\npor_campus &lt;- datos_plot %&gt;%\n  group_by(campus, grupo_edad) %&gt;%\n  summarise(n = n(), .groups = \"drop\") %&gt;%\n  group_by(campus) %&gt;%\n  mutate(pct = round(100 * n / sum(n), 1)) %&gt;%\n  ungroup()\n\n# 3. Datos totales (\"Todos\")\ntodos &lt;- datos_plot %&gt;%\n  group_by(grupo_edad) %&gt;%\n  summarise(n = n(), .groups = \"drop\") %&gt;%\n  mutate(campus = \"Todos\") %&gt;%\n  mutate(pct = round(100 * n / sum(n), 1))\n\n# 4. Combinar\ndatos_final &lt;- bind_rows(por_campus, todos) %&gt;%\n  mutate(etiqueta = paste0(\"Campus: \", campus, \"&lt;br&gt;\",\n                           \"Edad: \", grupo_edad, \"&lt;br&gt;\",\n                           \"Porcentaje: \", pct, \"%\"))\n\n# 5. Crear gráfico interactivo con filtro\nplot_ly(\n  data = datos_final,\n  x = ~grupo_edad,\n  y = ~pct,\n  type = \"bar\",\n  text = ~etiqueta,\n  textposition = \"outside\",\n  hoverinfo = \"text\",  # &lt;&lt;-- evita duplicados\n  transforms = list(\n    list(\n      type = 'filter',\n      target = ~campus,\n      operation = '=',\n      value = \"Todos\"  # valor por defecto\n    )\n  )\n) %&gt;%\n  layout(\n    title = \"Distribución porcentual de la Edad por campus (hasta 40 años)\",\n    xaxis = list(title = \"Edad (intervalos de 2 años)\", tickangle = -45),\n    yaxis = list(title = \"Porcentaje\", ticksuffix = \"%\"),\n    updatemenus = list(\n      list(\n        type = 'dropdown',\n        active = 0,\n        buttons = lapply(unique(datos_final$campus), function(c) {\n          list(method = \"restyle\",\n               args = list(\"transforms[0].value\", c),\n               label = c)\n        })\n      )\n    )\n  )\nlibrary(dplyr)\nlibrary(plotly)\n\n# 1. Agrupar por intervalos de edad y campus\ndatos_plot &lt;- datos %&gt;%\n  filter(!is.na(edad), !is.na(campus), edad &lt; 44) %&gt;%\n  mutate(grupo_edad = cut(edad, breaks = seq(14, 44, by = 2), right = FALSE))\n\n# 2. Datos por campus\npor_campus &lt;- datos_plot %&gt;%\n  group_by(campus, grupo_edad) %&gt;%\n  summarise(n = n(), .groups = \"drop\") %&gt;%\n  group_by(campus) %&gt;%\n  mutate(pct = round(100 * n / sum(n), 1)) %&gt;%\n  ungroup()\n\n# 3. Datos totales (\"Todos\")\ntodos &lt;- datos_plot %&gt;%\n  group_by(grupo_edad) %&gt;%\n  summarise(n = n(), .groups = \"drop\") %&gt;%\n  mutate(campus = \"Todos\") %&gt;%\n  mutate(pct = round(100 * n / sum(n), 1))\n\n# 4. Combinar\ndatos_final &lt;- bind_rows(por_campus, todos) %&gt;%\n  mutate(etiqueta = paste0(\"Campus: \", campus, \"&lt;br&gt;\",\n                           \"Edad: \", grupo_edad, \"&lt;br&gt;\",\n                           \"Porcentaje: \", pct, \"%\"))\n\n# 5. Gráfico interactivo sin texto visible permanente\nplot_ly(\n  data = datos_final,\n  x = ~grupo_edad,\n  y = ~pct,\n  type = \"bar\",\n  text = ~etiqueta,\n  hoverinfo = \"text\",  # Solo aparece al pasar el mouse\n  transforms = list(\n    list(\n      type = 'filter',\n      target = ~campus,\n      operation = '=',\n      value = \"Todos\"\n    )\n  )\n) %&gt;%\n  layout(\n    title = \"Distribución porcentual de la Edad por campus (hasta 40 años)\",\n    xaxis = list(title = \"Edad (intervalos de 2 años)\", tickangle = -45),\n    yaxis = list(title = \"Porcentaje\", ticksuffix = \"%\"),\n    updatemenus = list(\n      list(\n        type = 'dropdown',\n        active = 0,\n        buttons = lapply(unique(datos_final$campus), function(c) {\n          list(method = \"restyle\",\n               args = list(\"transforms[0].value\", c),\n               label = c)\n        })\n      )\n    )\n  )\nlibrary(dplyr)\nlibrary(plotly)\n\n# 1. Agrupar por intervalos de edad y campus\ndatos_plot &lt;- datos %&gt;%\n  filter(!is.na(edad), !is.na(campus), edad &lt; 44) %&gt;%\n  mutate(grupo_edad = cut(edad, breaks = seq(14, 44, by = 2), right = FALSE))\n\n# 2. Datos por campus\npor_campus &lt;- datos_plot %&gt;%\n  group_by(campus, grupo_edad) %&gt;%\n  summarise(n = n(), .groups = \"drop\") %&gt;%\n  group_by(campus) %&gt;%\n  mutate(pct = round(100 * n / sum(n), 1)) %&gt;%\n  ungroup()\n\n# 3. Datos totales (\"Todos\")\ntodos &lt;- datos_plot %&gt;%\n  group_by(grupo_edad) %&gt;%\n  summarise(n = n(), .groups = \"drop\") %&gt;%\n  mutate(campus = \"Todos\") %&gt;%\n  mutate(pct = round(100 * n / sum(n), 1))\n\n# 4. Combinar\ndatos_final &lt;- bind_rows(por_campus, todos) %&gt;%\n  mutate(hover_text = paste0(\n    \"Campus: \", campus, \"&lt;br&gt;\",\n    \"Edad: \", grupo_edad, \"&lt;br&gt;\",\n    \"Porcentaje: \", pct, \"%\"\n  ))\n\n# 5. Gráfico sin etiquetas visibles, solo en hover\nplot_ly(\n  data = datos_final,\n  x = ~grupo_edad,\n  y = ~pct,\n  type = \"bar\",\n  hovertext = ~hover_text,\n  hoverinfo = \"text\",\n  transforms = list(\n    list(\n      type = 'filter',\n      target = ~campus,\n      operation = '=',\n      value = \"Todos\"\n    )\n  )\n) %&gt;%\n  layout(\n    title = \"Distribución porcentual de la Edad por campus (hasta 40 años)\",\n    xaxis = list(title = \"Edad (intervalos de 2 años)\", tickangle = -45),\n    yaxis = list(title = \"Porcentaje\", ticksuffix = \"%\"),\n    updatemenus = list(\n      list(\n        type = 'dropdown',\n        active = 0,\n        buttons = lapply(unique(datos_final$campus), function(c) {\n          list(method = \"restyle\",\n               args = list(\"transforms[0].value\", c),\n               label = c)\n        })\n      )\n    )\n  )\nlibrary(dplyr)\nlibrary(plotly)\n\n# 1. Filtrar y agrupar por estado civil y campus\ndatos_plot &lt;- datos %&gt;%\n  filter(!is.na(campus), !is.na(est_civ), campus %in% c(\"Bucaramanga\", \"Cúcuta\", \"Valledupar\")) %&gt;%\n  group_by(campus, est_civ) %&gt;%\n  summarise(n = n(), .groups = \"drop\")\n\n# 2. Datos para 'Todos'\ntodos &lt;- datos %&gt;%\n  filter(!is.na(est_civ)) %&gt;%\n  group_by(est_civ) %&gt;%\n  summarise(n = n(), .groups = \"drop\") %&gt;%\n  mutate(campus = \"Todos\")\n\n# 3. Combinar\ndatos_final &lt;- bind_rows(datos_plot, todos)\n\n# 4. Crear gráfico de pastel con filtro\nfig &lt;- plot_ly(type = 'pie', hole = 0.3)  # Gráfico vacío base\n\n# Campus únicos\ncampus_niveles &lt;- unique(datos_final$campus)\n\n# Añadir una traza por cada campus\nfor (i in seq_along(campus_niveles)) {\n  datos_c &lt;- datos_final %&gt;% filter(campus == campus_niveles[i])\n  fig &lt;- fig %&gt;% add_trace(\n    labels = datos_c$est_civ,\n    values = datos_c$n,\n    name = campus_niveles[i],\n    visible = ifelse(i == 1, TRUE, FALSE),  # Solo el primero visible\n    type = \"pie\",\n    textinfo = \"percent+label\",\n    sort = FALSE,\n    direction = \"clockwise\",\n    rotation = 90\n  )\n}\n\n# 5. Dropdown para filtros\nfig &lt;- fig %&gt;% layout(\n  title = \"Distribución del estado civil por campus\",\n  showlegend = TRUE,\n  updatemenus = list(list(\n    active = 0,\n    type = \"dropdown\",\n    buttons = lapply(seq_along(campus_niveles), function(i) {\n      list(\n        method = \"restyle\",\n        args = list(\"visible\", as.list(seq_along(campus_niveles) == i)),\n        label = campus_niveles[i]\n      )\n    })\n  ))\n)\n\nfig\nlibrary(dplyr)\nlibrary(plotly)\n\n# 1. Agrupar datos por campus y estado civil\ndatos_plot &lt;- datos %&gt;%\n  filter(!is.na(campus), !is.na(est_civ), campus %in% c(\"Bucaramanga\", \"Cúcuta\", \"Valledupar\")) %&gt;%\n  group_by(campus, est_civ) %&gt;%\n  summarise(n = n(), .groups = \"drop\")\n\n# 2. Datos combinados para \"Todos\"\ntodos &lt;- datos %&gt;%\n  filter(!is.na(est_civ)) %&gt;%\n  group_by(est_civ) %&gt;%\n  summarise(n = n(), .groups = \"drop\") %&gt;%\n  mutate(campus = \"Todos\")\n\n# 3. Combinar todos los campus\ndatos_final &lt;- bind_rows(datos_plot, todos)\n\n# 4. Crear gráfico con filtro interactivo sin agujero\nfig &lt;- plot_ly(type = 'pie')  # SIN `hole = 0.3`\n\n# Campus disponibles\ncampus_niveles &lt;- unique(datos_final$campus)\n\n# Añadir una traza por campus\nfor (i in seq_along(campus_niveles)) {\n  datos_c &lt;- datos_final %&gt;% filter(campus == campus_niveles[i])\n  fig &lt;- fig %&gt;% add_trace(\n    labels = datos_c$est_civ,\n    values = datos_c$n,\n    name = campus_niveles[i],\n    visible = ifelse(i == 1, TRUE, FALSE),  # Solo visible el primero\n    type = \"pie\",\n    textinfo = \"percent+label\",\n    sort = FALSE,\n    direction = \"clockwise\",\n    rotation = 90\n  )\n}\n\n# 5. Filtro interactivo (dropdown)\nfig &lt;- fig %&gt;% layout(\n  title = \"Distribución del estado civil por campus\",\n  showlegend = TRUE,\n  updatemenus = list(list(\n    active = 0,\n    type = \"dropdown\",\n    buttons = lapply(seq_along(campus_niveles), function(i) {\n      list(\n        method = \"restyle\",\n        args = list(\"visible\", as.list(seq_along(campus_niveles) == i)),\n        label = campus_niveles[i]\n      )\n    })\n  ))\n)\n\nfig\nlibrary(dplyr)\nlibrary(plotly)\nlibrary(RColorBrewer)\n\n# 1. Preparar los datos (campus y estado civil)\ndatos_plot &lt;- datos %&gt;%\n  filter(!is.na(campus), !is.na(est_civ), campus %in% c(\"Bucaramanga\", \"Cúcuta\", \"Valledupar\")) %&gt;%\n  group_by(campus, est_civ) %&gt;%\n  summarise(n = n(), .groups = \"drop\")\n\n# 2. Agregar \"Todos\"\ntodos &lt;- datos %&gt;%\n  filter(!is.na(est_civ)) %&gt;%\n  count(est_civ, name = \"n\") %&gt;%\n  mutate(campus = \"Todos\")\n\n# 3. Unir todos\ndatos_final &lt;- bind_rows(datos_plot, todos)\n\n# 4. Lista de campus\nniveles_campus &lt;- unique(datos_final$campus)\n\n# 5. Paleta pastel (tantos colores como categorías de estado civil)\ncolores_pastel &lt;- brewer.pal(n = max(3, length(unique(datos_final$est_civ))), name = \"Pastel1\")\n\n# 6. Crear gráfico base con todas las trazas invisibles excepto la inicial\nfig &lt;- plot_ly(type = \"pie\")\n\nfor (i in seq_along(niveles_campus)) {\n  datos_c &lt;- datos_final %&gt;% filter(campus == niveles_campus[i])\n  \n  fig &lt;- fig %&gt;% add_trace(\n    labels = datos_c$est_civ,\n    values = datos_c$n,\n    type = \"pie\",\n    name = niveles_campus[i],\n    visible = ifelse(i == 1, TRUE, FALSE),\n    textinfo = \"label+percent\",\n    hoverinfo = \"label+percent+value\",\n    sort = FALSE,\n    marker = list(colors = colores_pastel),\n    direction = \"clockwise\",\n    rotation = 90\n  )\n}\n\n# 7. Layout con menú desplegable\nfig &lt;- fig %&gt;% layout(\n  title = \"Distribución del estado civil por campus\",\n  showlegend = TRUE,\n  updatemenus = list(list(\n    type = \"dropdown\",\n    direction = \"down\",\n    x = 0.1, y = 1.2,\n    buttons = lapply(seq_along(niveles_campus), function(i) {\n      visibilidad &lt;- rep(FALSE, length(niveles_campus))\n      visibilidad[i] &lt;- TRUE\n      list(method = \"restyle\",\n           args = list(\"visible\", visibilidad),\n           label = niveles_campus[i])\n    })\n  ))\n)\n\nfig\nlibrary(dplyr)\nlibrary(plotly)\nlibrary(RColorBrewer)\n\n# 1. Preparar los datos (campus y sexo)\ndatos_plot &lt;- datos %&gt;%\n  filter(!is.na(campus), !is.na(sexo_id), campus %in% c(\"Bucaramanga\", \"Cúcuta\", \"Valledupar\")) %&gt;%\n  group_by(campus, sexo_id) %&gt;%\n  summarise(n = n(), .groups = \"drop\")\n\n# 2. Agregar \"Todos\"\ntodos &lt;- datos %&gt;%\n  filter(!is.na(sexo_id)) %&gt;%\n  count(sexo_id, name = \"n\") %&gt;%\n  mutate(campus = \"Todos\")\n\n# 3. Unir todos\ndatos_final &lt;- bind_rows(datos_plot, todos)\n\n# 4. Lista de campus\nniveles_campus &lt;- unique(datos_final$campus)\n\n# 5. Paleta pastel (tantos colores como categorías de estado civil)\ncolores_pastel &lt;- brewer.pal(n = max(3, length(unique(datos_final$est_civ))), name = \"Pastel1\")\n\nWarning: Unknown or uninitialised column: `est_civ`.\n\n# 6. Crear gráfico base con todas las trazas invisibles excepto la inicial\nfig &lt;- plot_ly(type = \"pie\")\n\nfor (i in seq_along(niveles_campus)) {\n  datos_c &lt;- datos_final %&gt;% filter(campus == niveles_campus[i])\n  \n  fig &lt;- fig %&gt;% add_trace(\n    labels = datos_c$sexo_id,\n    values = datos_c$n,\n    type = \"pie\",\n    name = niveles_campus[i],\n    visible = ifelse(i == 1, TRUE, FALSE),\n    textinfo = \"label+percent\",\n    hoverinfo = \"label+percent+value\",\n    sort = FALSE,\n    marker = list(colors = colores_pastel),\n    direction = \"clockwise\",\n    rotation = 90\n  )\n}\n\n# 7. Layout con menú desplegable\nfig &lt;- fig %&gt;% layout(\n  title = \"Distribución del sexo por campus\",\n  showlegend = TRUE,\n  updatemenus = list(list(\n    type = \"dropdown\",\n    direction = \"down\",\n    x = 0.1, y = 1.2,\n    buttons = lapply(seq_along(niveles_campus), function(i) {\n      visibilidad &lt;- rep(FALSE, length(niveles_campus))\n      visibilidad[i] &lt;- TRUE\n      list(method = \"restyle\",\n           args = list(\"visible\", visibilidad),\n           label = niveles_campus[i])\n    })\n  ))\n)\n\nfig\nlibrary(dplyr)\nlibrary(plotly)\n\n# 1. Preparar los datos: cuenta y porcentaje\nestado_civil_df &lt;- datos %&gt;%\n  filter(!is.na(est_civ)) %&gt;%\n  count(est_civ) %&gt;%\n  mutate(pct = round(100 * n / sum(n), 1),\n         label = paste0(est_civ, \": \", pct, \"%\"))\n\n# 2. Gráfico de pastel interactivo\nplot_ly(\n  data = estado_civil_df,\n  labels = ~est_civ,\n  values = ~pct,\n  type = 'pie',\n  textinfo = 'label+percent',\n  hoverinfo = 'text',\n  text = ~label,\n  marker = list(colors = RColorBrewer::brewer.pal(n = max(3, nrow(estado_civil_df)), name = \"Pastel1\"))\n) %&gt;%\n  layout(\n    title = \"Estado civil de los estudiantes\",\n    showlegend = TRUE\n  )\nlibrary(dplyr)\nlibrary(plotly)\n\n# 1. Agrupar por campus y estado civil\nestado_civil_df &lt;- datos %&gt;%\n  filter(!is.na(campus), !is.na(est_civ)) %&gt;%\n  count(campus, est_civ, name = \"n\") %&gt;%\n  group_by(campus) %&gt;%\n  mutate(pct = round(100 * n / sum(n), 1)) %&gt;%\n  ungroup()\n\n# 2. Agregar una categoría \"Todos\"\ntodos_df &lt;- datos %&gt;%\n  filter(!is.na(est_civ)) %&gt;%\n  count(est_civ, name = \"n\") %&gt;%\n  mutate(campus = \"Todos\",\n         pct = round(100 * n / sum(n), 1))\n\n# 3. Combinar ambas\nestado_civil_full &lt;- bind_rows(estado_civil_df, todos_df)\n\n# 4. Crear gráfico interactivo\nplot_ly(\n  data = estado_civil_full %&gt;% filter(campus == \"Todos\"),\n  labels = ~est_civ,\n  values = ~pct,\n  type = 'pie',\n  textinfo = 'label+percent',\n  insidetextorientation = 'radial',\n  transforms = list(\n    list(\n      type = 'filter',\n      target = ~campus,\n      operation = '=',\n      value = \"Todos\"\n    )\n  )\n) %&gt;%\n  layout(\n    title = \"Distribución de estado civil por campus\",\n    updatemenus = list(\n      list(\n        type = 'dropdown',\n        active = 0,\n        buttons = lapply(unique(estado_civil_full$campus), function(c) {\n          list(\n            method = \"restyle\",\n            args = list(\"transforms[0].value\", c),\n            label = c\n          )\n        })\n      )\n    )\n  )\nlibrary(dplyr)\nlibrary(plotly)\nlibrary(RColorBrewer)\n\n# 1. Preparar los datos (campus y estado civil)\ndatos_plot &lt;- datos %&gt;%\n  filter(!is.na(campus), !is.na(est_civ), campus %in% c(\"Bucaramanga\", \"Cúcuta\", \"Valledupar\")) %&gt;%\n  group_by(campus, prog_abrev) %&gt;%\n  summarise(n = n(), .groups = \"drop\")\n\n# 2. Agregar \"Todos\"\ntodos &lt;- datos %&gt;%\n  filter(!is.na(prog_abrev)) %&gt;%\n  count(est_civ, name = \"n\") %&gt;%\n  mutate(campus = \"Todos\")\n\n# 3. Unir todos\ndatos_final &lt;- bind_rows(datos_plot, todos)\n\n# 4. Lista de campus\nniveles_campus &lt;- unique(datos_final$campus)\n\n\nplot_ly(data=datos, x = ~campus, y = ~edad, color = ~campus, type = \"box\")\nlibrary(plotly)\nplot_ly(data=datos, x = ~ prog_abrev, y = ~edad, color = ~prog_abrev, type = \"box\")\n\nWarning in RColorBrewer::brewer.pal(N, \"Set2\"): n too large, allowed maximum for palette Set2 is 8\nReturning the palette you asked for with that many colors\nWarning in RColorBrewer::brewer.pal(N, \"Set2\"): n too large, allowed maximum for palette Set2 is 8\nReturning the palette you asked for with that many colors\n\n\n\n\n\nshowlegend = FALSE  # 👈 Asegurar que se oculte la leyenda general\n\n# Convertir columnas de texto a UTF-8\ndatos &lt;- datos %&gt;%\n  mutate(across(where(is.character), ~ iconv(., from = \"\", to = \"UTF-8\")))\n\ndatos &lt;- datos %&gt;%\n  mutate(across(where(is.character), ~ iconv(., from = \"\", to = \"UTF-8\", sub = \"\")))\n\n# Buscar caracteres no válidos en 'programa'\nproblemas &lt;- datos %&gt;%\n  filter(!is.na(prog_abrev)) %&gt;%\n  filter(is.na(iconv(prog_abrev, from = \"\", to = \"UTF-8\")))\n\nprint(problemas$prog_abrev)\n\ncharacter(0)\nlibrary(dplyr)\nlibrary(plotly)\n\n# Asegurar codificación UTF-8\ndatos &lt;- datos %&gt;%\n  mutate(across(where(is.character), ~ iconv(., from = \"\", to = \"UTF-8\", sub = \"\")))\n\n# Agregar opción \"Todos\"\ndatos_todos &lt;- datos %&gt;%\n  filter(!is.na(prog_abrev), !is.na(edad)) %&gt;%\n  mutate(campus = \"Todos\")\n\ndatos_final &lt;- bind_rows(datos, datos_todos)\n\n# Niveles de campus\nniveles_campus &lt;- c(\"Todos\", \"Bucaramanga\", \"Cucuta\", \"Valledupar\")\n\n# Crear gráfico base con todas las trazas (una por campus)\nfig &lt;- plot_ly()\n\nfor (i in seq_along(niveles_campus)) {\n  datos_c &lt;- datos_final %&gt;% filter(campus == niveles_campus[i])\n  \n  fig &lt;- fig %&gt;%\n    add_boxplot(\n      data = datos_c,\n      x = ~prog_abrev,\n      y = ~edad,\n      name = niveles_campus[i],\n      visible = ifelse(i == 1, TRUE, FALSE),  # Solo la primera visible\n      boxpoints = \"outliers\",\n      marker = list(color = \"#6BAED6\"),\n      line = list(color = \"#2171B5\")\n    )\n}\n\n# Layout con menú desplegable para filtrar por campus\nfig &lt;- fig %&gt;%\n  layout(\n    title = \"Distribución de edad por programa y campus\",\n    yaxis = list(title = \"Edad\"),\n    xaxis = list(title = \"Programa\", tickangle = -45),\n    showlegend = FALSE,\n    updatemenus = list(\n      list(\n        type = \"dropdown\",\n        direction = \"down\",\n        x = 0.1,\n        y = 1.2,\n        buttons = lapply(seq_along(niveles_campus), function(i) {\n          visibilidad &lt;- rep(FALSE, length(niveles_campus))\n          visibilidad[i] &lt;- TRUE\n          list(\n            method = \"restyle\",\n            args = list(\"visible\", visibilidad),\n            label = niveles_campus[i]\n          )\n        })\n      )\n    )\n  )\n\nfig\nlibrary(dplyr)\nlibrary(plotly)\n\n# 1. Agrupar por intervalos de edad y campus\ndatos_plot &lt;- datos %&gt;%\n  filter(!is.na(edad), !is.na(campus), edad &lt; 44) %&gt;%\n  mutate(grupo_edad = cut(edad, breaks = seq(14, 44, by = 2), right = FALSE))\n\n# 2. Datos por campus\npor_campus &lt;- datos_plot %&gt;%\n  group_by(campus, grupo_edad) %&gt;%\n  summarise(n = n(), .groups = \"drop\") %&gt;%\n  group_by(campus) %&gt;%\n  mutate(pct = round(100 * n / sum(n), 1)) %&gt;%\n  ungroup()\n\n# 3. Datos totales (\"Todos\")\ntodos &lt;- datos_plot %&gt;%\n  group_by(grupo_edad) %&gt;%\n  summarise(n = n(), .groups = \"drop\") %&gt;%\n  mutate(campus = \"Todos\") %&gt;%\n  mutate(pct = round(100 * n / sum(n), 1))\n\n# 4. Combinar\ndatos_final &lt;- bind_rows(por_campus, todos) %&gt;%\n  mutate(hover_text = paste0(\n    \"Campus: \", campus, \"&lt;br&gt;\",\n    \"Edad: \", grupo_edad, \"&lt;br&gt;\",\n    \"Porcentaje: \", pct, \"%\"\n  ))\n\n# 5. Fijar niveles con \"Todos\" primero\nniveles_campus &lt;- c(\"Todos\", \"Bucaramanga\", \"Cucuta\", \"Valledupar\")\ndatos_final$campus &lt;- factor(datos_final$campus, levels = niveles_campus)\n\n# 6. Gráfico con filtro por campus\nplot_ly(\n  data = datos_final,\n  x = ~grupo_edad,\n  y = ~pct,\n  type = \"bar\",\n  hovertext = ~hover_text,\n  hoverinfo = \"text\",\n  transforms = list(\n    list(\n      type = 'filter',\n      target = ~campus,\n      operation = '=',\n      value = \"Todos\"  # Valor por defecto\n    )\n  )\n) %&gt;%\n  layout(\n    title = \"Distribución porcentual de la Edad por campus (hasta 40 años)\",\n    xaxis = list(title = \"Edad (intervalos de 2 años)\", tickangle = -45),\n    yaxis = list(title = \"Porcentaje\", ticksuffix = \"%\"),\n    updatemenus = list(\n      list(\n        type = 'dropdown',\n        active = 0,\n        buttons = lapply(niveles_campus, function(c) {\n          list(method = \"restyle\",\n               args = list(\"transforms[0].value\", c),\n               label = c)\n        })\n      )\n    )\n  )\nlibrary(dplyr)\nlibrary(plotly)\nlibrary(RColorBrewer)\n\n# 1. Preparar los datos\ndatos_plot &lt;- datos %&gt;%\n  filter(!is.na(campus), !is.na(pais), campus %in% c(\"Bucaramanga\", \"Cúcuta\", \"Valledupar\")) %&gt;%\n  group_by(campus, pais) %&gt;%\n  summarise(n = n(), .groups = \"drop\")\n\n# 2. Agregar \"Todos\"\ntodos &lt;- datos %&gt;%\n  filter(!is.na(pais)) %&gt;%\n  count(pais, name = \"n\") %&gt;%\n  mutate(campus = \"Todos\")\n\n# 3. Fijar niveles con \"Todos\" primero\nniveles_campus &lt;- c(\"Todos\", \"Bucaramanga\", \"Cúcuta\", \"Valledupar\")\n\n# 4. Unir todo\ndatos_final &lt;- bind_rows(datos_plot, todos) %&gt;%\n  mutate(campus = factor(campus, levels = niveles_campus))\n\n# 5. Pie chart con filtro por campus\nplot_ly(\n  data = datos_final,\n  labels = ~pais,\n  values = ~n,\n  type = \"pie\",\n  textinfo = \"label+percent\",\n  hoverinfo = \"label+percent+value\",\n  marker = list(colors = brewer.pal(8, \"Pastel1\")),\n  rotation = 270,\n  transforms = list(\n    list(\n      type = 'filter',\n      target = ~campus,\n      operation = '=',\n      value = \"Todos\"\n    )\n  )\n) %&gt;%\n  layout(\n    title = \"Distribución del país de origen por campus\",\n    updatemenus = list(\n      list(\n        type = 'dropdown',\n        active = 0,\n        buttons = lapply(niveles_campus, function(c) {\n          list(method = \"restyle\",\n               args = list(\"transforms[0].value\", c),\n               label = c)\n        })\n      )\n    )\n  )",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Campus Filtro</span>"
    ]
  }
]